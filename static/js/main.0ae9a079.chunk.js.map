{"version":3,"sources":["rocket.png","RegistarForm.js","App.js","reportWebVitals.js","index.js"],"names":["RegistarForm","formik","useFormik","initialValues","name","lastname","password","confirmpassword","email","phone","city","country","onSubmit","values","onSubmitprops","data","console","log","alert","resetForm","fetch","method","headers","body","JSON","stringify","validate","errors","length","test","className","handleSubmit","src","image","alt","id","type","placeholder","getFieldProps","touched","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ae9a079.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rocket.52e732a8.png\";","import React from 'react'\r\nimport './App.css'\r\nimport { useFormik } from 'formik';\r\nimport image from './rocket.png'\r\n\r\n\r\n\r\nfunction RegistarForm() {\r\n\r\n    const initialValues = {\r\n        name: \"\",\r\n        lastname: \"\",\r\n        password: \"\",\r\n        confirmpassword: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        city: \"\",\r\n        country: \"\"\r\n    }\r\n\r\n    const validate = values => {\r\n        let errors = {}\r\n\r\n        if ( !values.name ) {\r\n            errors.name = \"Name is Requried\"\r\n        }else if (values.name.length < 3){\r\n            errors.name = \"Name is too short\"\r\n        }\r\n\r\n            if ( !values.lastname ) {\r\n                errors.lastname = \"Requried\"\r\n            }else if(values.lastname.length < 3){\r\n                errors.lastname = \"Enter valid Name\"\r\n            }\r\n\r\n            if ( !values.password ) {\r\n                errors.password = \"Requried\"\r\n            }else if(values.password.length < 8){\r\n                errors.password = \"Password is too short\"\r\n            }\r\n\r\n            if ( values.confirmpassword !== values.password) {\r\n                errors.confirmpassword = \"Password does not match\"\r\n            } else if (!values.confirmpassword){\r\n                errors.confirmpassword = \"Requried\"\r\n            }\r\n\r\n            if(!values.email){\r\n                errors.email = \"Email Requried\"\r\n            }else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n              }\r\n\r\n            if(!values.phone){\r\n                errors.phone = \"Phone number Requried\"\r\n            }\r\n        \r\n            if(!values.city){\r\n                errors.city = \"Requried\"\r\n            }   \r\n        \r\n            if(!values.country){\r\n                errors.country = \"Requried\"\r\n            }\r\n\r\n        return errors\r\n\r\n    }\r\n\r\n    const onSubmit = ( values , onSubmitprops ) => {\r\n        let data = values\r\n        console.log( \"value is:\", data )\r\n        alert( \"submitted\" )\r\n        onSubmitprops.resetForm();\r\n\r\n        fetch(\"https://localhost:3000/posts\",{\r\n        method:'POST',\r\n        headers:{\r\n            'Accept':'application/json',\r\n            'Content-Type':'application/json'\r\n        },\r\n        body:JSON.stringify(data)\r\n        })\r\n    }\r\n\r\n\r\n\r\n    const formik = useFormik( {\r\n        initialValues,\r\n        onSubmit,\r\n        validate\r\n    } )\r\n\r\n   \r\n    \r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"box\">\r\n                <form onSubmit={ formik.handleSubmit }>\r\n                    <div className=\"container\">\r\n\r\n                        <div className=\"sideview\">\r\n                            <img src={ image } alt={ \"rocket\" } id=\"image\" />\r\n                            <h2>Welcome</h2>\r\n                            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n                                Lorem Ipsum has been the industry's standard dummy text</p>\r\n                            <button id=\"btn\">Login</button>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"content\">\r\n                            <h1>Apply as a Employee</h1>\r\n                            <div className=\"subcontent\">\r\n                                <div className=\"first-row\">\r\n                                    <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"First Name* \"\r\n                                        { ...formik.getFieldProps( 'name' ) } />\r\n                                    { formik.touched.name && formik.errors.name ? ( <div className=\"errors\">{ formik.errors.name }</div> ) : <div className=\"noerr\"></div>}\r\n                                    \r\n                                    \r\n\r\n\r\n                                    <input type=\"text\" id=\"lname\" name=\"lastname\" placeholder=\"Last Name*\"\r\n                                        { ...formik.getFieldProps( 'lastname' ) } />\r\n                                    { formik.touched.lastname && formik.errors.lastname ? ( <div className=\"errors\">{ formik.errors.lastname }</div> ) : <div className=\"noerr\"></div>}\r\n\r\n                                    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"\r\n                                        { ...formik.getFieldProps( 'password' ) } />\r\n                                    { formik.touched.password && formik.errors.password ? ( <div className=\"errors\">{ formik.errors.password }</div> ) :  <div className=\"noerr\"></div> }\r\n\r\n                                    <input type=\"password\" id=\"confpassword\" name=\"confirmpassword\" placeholder=\"Confirm Password \"\r\n                                    {...formik.getFieldProps('confirmpassword')} />\r\n                                    {formik.touched.confirmpassword && formik.errors.confirmpassword ? (<div className=\"errors\">{formik.errors.confirmpassword}</div>):  <div className=\"noerr\"></div>}\r\n\r\n                                    <span>\r\n                                        <label>Male</label>\r\n                                        <input type=\"radio\"/>\r\n\r\n                                        <label>Female</label>\r\n                                        <input type=\"radio\" />\r\n                                    </span>\r\n                                </div>\r\n\r\n                                <div className=\"second-row\">\r\n                                    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Your Email* \" \r\n                                    {...formik.getFieldProps('email')}/>\r\n                                    {formik.touched.email && formik.errors.email ? (<div className=\"errors\">{formik.errors.email}</div>):  <div className=\"noerr\"></div>}\r\n\r\n                                    <input type=\"number\" id=\"phone\" name=\"phone\" placeholder=\"Your Phone\"\r\n                                    {...formik.getFieldProps('phone')}/>\r\n                                    {formik.touched.phone && formik.errors.phone ? (<div className=\"errors\">{formik.errors.phone}</div>):  <div className=\"noerr\"></div>}\r\n                                    \r\n                                    <input type=\"text\" id=\"city\" name=\"city\" placeholder=\"City\"\r\n                                    {...formik.getFieldProps('city')}/>\r\n                                    {formik.touched.city && formik.errors.city ? (<div className=\"errors\">{formik.errors.city}</div>):  <div className=\"noerr\"></div>}\r\n                                    \r\n                                   \r\n                                    <input type=\"text\" id=\"country\" name=\"country\" placeholder=\"Country\"\r\n                                    {...formik.getFieldProps('country')}/>\r\n                                    {formik.touched.country && formik.errors.country ? (<div className=\"errors\">{formik.errors.country}</div>):  <div className=\"noerr\"></div>}\r\n                                    \r\n                                    \r\n                                    <button type=\"btn\">Register</button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegistarForm\r\n","import RegistarForm  from \"./RegistarForm.js\";\n\nfunction App() {\n  return (\n    <>\n    <RegistarForm/>    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}